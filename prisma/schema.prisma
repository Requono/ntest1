// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String          @id @default(cuid())
  username      String          @unique
  email         String          @unique
  password      String
  iterations    Int             @default(600000)
  hash          String
  createdAt     DateTime        @default(now()) @map(name: "created_at")
  updatedAt     DateTime        @updatedAt @map(name: "updated_at")
  createdEvents Event[]
  events        UserOnEvent[]
  groups        UserOnGroup[]
  groupId       String?
  leaderOnGroup LeaderOnGroup[]
  group         Group[]
  Session       Session[]

  @@map(name: "users")
}

model Event {
  id          String        @id @default(cuid())
  createdById String        @unique
  joinedUsers User[]        @relation()
  createdAt   DateTime      @default(now()) @map(name: "created_at")
  updatedAt   DateTime      @updatedAt @map(name: "updated_at")
  endDate     DateTime
  users       UserOnEvent[]

  @@map(name: "events")
}

model UserOnEvent {
  event   Event  @relation(fields: [eventId], references: [id])
  eventId String @unique
  user    User   @relation(fields: [userId], references: [id])
  userId  String @unique

  @@id([eventId, userId])
  @@map(name: "useronevent")
}

model Group {
  id            String          @unique
  createdBy     User            @relation(fields: [userId], references: [id])
  name          String
  createdAt     DateTime        @default(now()) @map(name: "created_at")
  updatedAt     DateTime        @updatedAt @map(name: "updated_at")
  users         UserOnGroup[]
  userId        String
  LeaderOnGroup LeaderOnGroup[]

  @@map(name: "groups")
}

model UserOnGroup {
  group   Group  @relation(fields: [groupId], references: [id])
  groupId String @unique
  user    User   @relation(fields: [userId], references: [id])
  userId  String @unique

  @@id([groupId, userId])
  @@map(name: "userongroup")
}

model LeaderOnGroup {
  group   Group  @relation(fields: [groupId], references: [id])
  groupId String @unique
  user    User   @relation(fields: [userId], references: [id])
  userId  String @unique

  @@id([groupId, userId])
  @@map(name: "leaderongroup")
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}
